name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  cpp-lint:
    runs-on: ubuntu-latest
    name: C/C++ Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install clang-format and cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck
    
    - name: Run clang-format check
      run: |
        find . -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
        xargs clang-format --dry-run --Werror --style=Google
    
    - name: Run cppcheck static analysis
      run: |
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem \
        --suppress=unusedFunction --suppress=unmatchedSuppression \
        $(find . -name "*.c" -o -name "*.cpp")

  python-checks:
    runs-on: ubuntu-latest
    name: Python Linting and Testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest mypy
        # Install project dependencies if requirements.txt exists
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install dev dependencies if they exist
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run pylint
      run: |
        # Find all Python files and run pylint
        find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | \
        xargs pylint --fail-under=8.0 || true
        # Using --fail-under=8.0 sets minimum score to 8/10, adjust as needed
    
    - name: Run mypy type checking
      run: |
        mypy . --ignore-missing-imports --follow-imports=silent || true
        # Add --strict for stricter type checking if desired
    
    - name: Run pytest
      run: |
        # Check if any test files exist before running pytest
        if find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
          echo "Found test files, running pytest..."
          pytest --verbose --tb=short
        else
          echo "No test files found (test_*.py or *_test.py), skipping pytest"
        fi
        # Add --cov for coverage if pytest-cov is installed
        # pytest --cov=. --cov-report=xml --verbose

  # Optional: Combined status check
  all-checks:
    runs-on: ubuntu-latest
    needs: [cpp-lint, python-checks]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.cpp-lint.result }}" == "failure" || "${{ needs.python-checks.result }}" == "failure" ]]; then
          echo "One or more checks failed"
          exit 1
        else
          echo "All checks passed"
        fi